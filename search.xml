<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1.15.3 HA kubernetes Cluster Playbook (following masters)</title>
      <link href="2020/09/20/1-15-3-HA-kubernetes-Cluster-Playbook-following-masters/"/>
      <url>2020/09/20/1-15-3-HA-kubernetes-Cluster-Playbook-following-masters/</url>
      
        <content type="html"><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><img src="/assets/images/external-etcd-topology-followingMasters.png" style="width: 666px;" /><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuberentes </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.15.3 HA kubernetes Cluster Playbook (leading master)</title>
      <link href="2020/09/15/1-15-3-HA-kubernetes-Cluster-Playbook-leading-master/"/>
      <url>2020/09/15/1-15-3-HA-kubernetes-Cluster-Playbook-leading-master/</url>
      
        <content type="html"><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><img src="/assets/images/external-etcd-topology-leadingMaster.png" style="width: 666px;" /><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuberentes </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.15.3 HA kubernetes Cluster Playbook (load balance)</title>
      <link href="2020/09/10/1-15-3-HA-kubernetes-Cluster-Playbook-load-balance/"/>
      <url>2020/09/10/1-15-3-HA-kubernetes-Cluster-Playbook-load-balance/</url>
      
        <content type="html"><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><img src="/assets/images/external-etcd-topology-lb.png" style="width: 666px;" /><a id="more"></a><h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b>execute the variables in all console (masters) at the very begining, make sure all servers are using the exact same value (and avoid manual input)</div><pre><code class="bash">## change if necessary# hostnamemaster01Name=&#39;master01&#39;master02Name=&#39;master02&#39;master03Name=&#39;master03&#39;# ipaddressmaster01IP=&#39;192.168.100.200&#39;master01IP=&#39;192.168.100.201&#39;master01IP=&#39;192.168.100.202&#39;virtualIP=&#39;192.168.100.250&#39;leadIP=&quot;$&#123;master01IP&#125;&quot;leadName=&quot;$&#123;master01Name&#125;&quot;k8sVer=&#39;v1.15.3&#39;cfsslDownloadUrl=&#39;https://pkg.cfssl.org/R1.2&#39;etcdVer=&#39;v3.3.15&#39;etcdDownloadUrl=&#39;https://github.com/etcd-io/etcd/releases/download&#39;etcdSSLPath=&#39;/etc/etcd/ssl&#39;etcdInitialCluster=&quot;$&#123;master01Name&#125;=https://$&#123;master01IP&#125;:2380,$&#123;master02Name&#125;=https://$&#123;master02IP&#125;:2380,$&#123;master03Name&#125;=https://$&#123;master03IP&#125;:2380&quot;keepaliveVer=&#39;2.0.18&#39;haproxyVer=&#39;2.0.6&#39;helmVer=&#39;v2.14.3&#39;interface=$(netstat -nr | grep -E &#39;UG|UGSc&#39; | grep -E &#39;^0.0.0|default&#39; | grep -E &#39;[0-9.]&#123;7,15&#125;&#39; | awk -F&#39; &#39; &#39;&#123;print $NF&#125;&#39;)ipAddr=$(ip a s &quot;$&#123;interface&#125;&quot; | sed -rn &#39;s|\W*inet[^6]\W*([0-9\.]&#123;7,15&#125;).*$|\1|p&#39;)peerName=$(hostname)</code></pre><br><h2 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h2><h3 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h3><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> keepalived configuration need to be setup in all kubernetes masters</div><ul><li><p>with haproxy</p><pre><code class="bash">$ sudo bash -c &#39;cat &gt; /etc/keepalived/keepalived.conf&#39; &lt;&lt; EOF! Configuration File for keepalivedglobal_defs &#123;  router_id LVS_DEVEL&#125;vrrp_script check_haproxy &#123;  script &quot;killall -0 haproxy&quot;  interval 3  weight -2  fall 10  rise 2&#125;vrrp_instance VI_1 &#123;  state MASTER  interface $&#123;interface&#125;  virtual_router_id 51  priority 50  advert_int 1  authentication &#123;    auth_type PASS    auth_pass 35f18af7190d51c9f7f78f37300a0cbd  &#125;  virtual_ipaddress &#123;    $&#123;virtualIP&#125;  &#125;  track_script &#123;    check_haproxy  &#125;&#125;EOF</code></pre></li><li><p>without haproxy</p><ul><li><p><code>keepalived.conf</code></p><pre><code class="bash">$ sudo bash -c &#39;cat &gt; /etc/keepalived/keepalived.conf&#39; &lt;&lt; EOF! Configuration File for keepalivedglobal_defs &#123;  router_id LVS_DEVEL&#125;vrrp_script check_apiserver &#123;  script &quot;/etc/keepalived/check_apiserver.sh&quot;  interval 3  weight -2  fall 10  rise 2&#125;vrrp_instance VI_1 &#123;  state MASTER  interface $&#123;interface&#125;  virtual_router_id 51  priority 50  authentication &#123;    auth_type PASS    auth_pass 4be37dc3b4c90194d1600c483e10ad1d  &#125;  virtual_ipaddress &#123;    $&#123;virtualIP&#125;  &#125;  track_script &#123;    check_apiserver  &#125;&#125;EOF</code></pre></li><li><p><code>check_apiserver.sh</code></p><pre><code class="bash">$ sudo bash -c &#39;cat &gt; /etc/keepalived/check_apiserver.sh&#39; &lt;&lt; EOF#!/bin/sherrorExit() &#123;  echo &quot;*** \$*&quot; 1&gt;&amp;2  exit 1&#125;curl --silent                           \     --max-time 2                       \     --insecure https://localhost:6443/ \     -o /dev/null                       \     || errorExit &#39;Error GET https://localhost:6443/&#39;if ip addr | grep -q $&#123;virtualIP&#125;; then  curl --silent                                  \       --max-time 2                              \       --insecure https://$&#123;virtualIP&#125;:6443/     \       -o /dev/null                              \       || errorExit &quot;Error GET https://$&#123;virtualIP&#125;:6443/&quot;fiEOF</code></pre></li></ul></li></ul><h3 id="enable-keepalived-services-in-all-masters"><a href="#enable-keepalived-services-in-all-masters" class="headerlink" title="enable keepalived services in all masters"></a>enable keepalived services in all masters</h3><ul><li>start keepalived serice and verify<pre><code class="bash">$ sudo systemctl enable keepalived.service$ sudo systemctl start keepalived.service</code></pre><br></li></ul><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> One of the master will be setup to virutal dual networking card and show 2 ip addresses.<br>The one without Broadcast is the virutal IP.</div><ul><li><p>verify</p><pre><code class="bash">$ sudo systemctl is-enabled keepalived.serviceenabled$ sudo systemctl is-active keepalived.serviceactive$ ip -4 a s $&#123;interface&#125;2: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether 00:50:50:85:96:64 brd ff:ff:ff:ff:ff:ff    inet 192.168.100.202/24 brd 192.168.100.255 scope global noprefixroute eno1       valid_lft forever preferred_lft forever    inet 192.168.100.250/32 scope global eno1       valid_lft forever preferred_lft forever</code></pre></li></ul><details><summary> click for more details </summary><pre><code>$ for i in &#123;1..3&#125;; do  -> echo '---------'  -> ssh -q devops@master0$&#123;i&#125; "/usr/sbin/ip -4 a s $(netstat -nr | grep -E 'UG|UGSc' | grep -E '^0.0.0|default' | grep -E '[0-9.]&#123;7,15&#125;' | awk -F' ' '&#123;print $NF&#125;')"  -> done---------2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000    inet 192.168.100.200/24 brd 192.168.100.255 scope global noprefixroute eno1       valid_lft forever preferred_lft forever---------2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000    inet 192.168.100.201/24 brd 192.168.100.255 scope global noprefixroute eno1       valid_lft forever preferred_lft forever---------2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000    inet 192.168.100.202/24 brd 192.168.100.255 scope global noprefixroute eno1       valid_lft forever preferred_lft forever    inet 192.168.100.250/32 scope global eno1       <<<< virtual ip in master node 03       valid_lft forever preferred_lft forever</code></pre><br><pre><code>$ for i in &#123;1..3&#125;; do  -> ssh -q devops@master0$&#123;i&#125; "sudo systemctl status keepalived"  -> echo ''  -> done● keepalived.service - LVS and VRRP High Availability Monitor   Loaded: loaded (/etc/systemd/system/keepalived.service; enabled; vendor preset: disabled)   Active: active (running) since Tue 2019-09-03 01:13:17 PDT; 18min ago  Process: 26437 ExecStart=/usr/local/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=0/SUCCESS) Main PID: 26438 (keepalived)    Tasks: 2   Memory: 652.0K   CGroup: /system.slice/keepalived.service           ├─26438 /usr/local/sbin/keepalived -D           └─26439 /usr/local/sbin/keepalived -DSep 03 01:15:35 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:36 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:37 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:38 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:39 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:40 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:41 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:42 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:43 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50Sep 03 01:15:43 master01 Keepalived_vrrp[26439]: (VI_1) ip address associated with VRID 51 not present in MASTER advert : 10.69.78.50● keepalived.service - LVS and VRRP High Availability Monitor   Loaded: loaded (/etc/systemd/system/keepalived.service; enabled; vendor preset: disabled)   Active: active (running) since Tue 2019-09-03 01:17:24 PDT; 14min ago  Process: 32672 ExecStart=/usr/local/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=0/SUCCESS) Main PID: 32673 (keepalived)    Tasks: 2   Memory: 652.0K   CGroup: /system.slice/keepalived.service           ├─32673 /usr/local/sbin/keepalived -D           └─32674 /usr/local/sbin/keepalived -DSep 03 01:17:24 master02 Keepalived_vrrp[32674]: (Line 19) Truncating auth_pass to 8 charactersSep 03 01:17:24 master02 Keepalived_vrrp[32674]: WARNING - script '/etc/keepalived/check_apiserver.sh' is not executable for uid:gid 0:0 - disabling.Sep 03 01:17:24 master02 Keepalived_vrrp[32674]: SECURITY VIOLATION - scripts are being executed but script_security not enabled.Sep 03 01:17:24 master02 Keepalived_vrrp[32674]: Assigned address 192.168.100.201 for interface eno1Sep 03 01:17:24 master02 Keepalived_vrrp[32674]: Assigned address fe80::250:56ff:fe88:fd2 for interface eno1Sep 03 01:17:24 master02 Keepalived_vrrp[32674]: Registering gratuitous ARP shared channelSep 03 01:17:24 master02 Keepalived_vrrp[32674]: (VI_1) removing VIPs.Sep 03 01:17:24 master02 Keepalived_vrrp[32674]: (VI_1) Entering BACKUP STATE (init)Sep 03 01:17:24 master02 Keepalived_vrrp[32674]: VRRP sockpool: [ifindex(2), family(IPv4), proto(112), unicast(0), fd(11,12)]Sep 03 01:17:24 master02 systemd[1]: Started LVS and VRRP High Availability Monitor.● keepalived.service - LVS and VRRP High Availability Monitor   Loaded: loaded (/etc/systemd/system/keepalived.service; enabled; vendor preset: disabled)   Active: active (running) since Tue 2019-09-03 01:17:35 PDT; 14min ago  Process: 16830 ExecStart=/usr/local/sbin/keepalived $KEEPALIVED_OPTIONS (code=exited, status=0/SUCCESS) Main PID: 16831 (keepalived)    Tasks: 2   Memory: 648.0K   CGroup: /system.slice/keepalived.service           ├─16831 /usr/local/sbin/keepalived -D           └─16832 /usr/local/sbin/keepalived -DSep 03 01:17:35 master03 Keepalived_vrrp[16832]: (Line 19) Truncating auth_pass to 8 charactersSep 03 01:17:35 master03 Keepalived_vrrp[16832]: WARNING - script '/etc/keepalived/check_apiserver.sh' is not executable for uid:gid 0:0 - disabling.Sep 03 01:17:35 master03 Keepalived_vrrp[16832]: SECURITY VIOLATION - scripts are being executed but script_security not enabled.Sep 03 01:17:35 master03 Keepalived_vrrp[16832]: Assigned address 192.168.100.202 for interface eno1Sep 03 01:17:35 master03 Keepalived_vrrp[16832]: Assigned address fe80::250:56ff:fe88:9624 for interface eno1Sep 03 01:17:35 master03 Keepalived_vrrp[16832]: Registering gratuitous ARP shared channelSep 03 01:17:35 master03 Keepalived_vrrp[16832]: (VI_1) removing VIPs.Sep 03 01:17:35 master03 Keepalived_vrrp[16832]: (VI_1) Entering BACKUP STATE (init)Sep 03 01:17:35 master03 Keepalived_vrrp[16832]: VRRP sockpool: [ifindex(2), family(IPv4), proto(112), unicast(0), fd(11,12)]Sep 03 01:17:35 master03 systemd[1]: Started LVS and VRRP High Availability Monitor.</code></pre></details><br><h2 id="haproxy"><a href="#haproxy" class="headerlink" title="haproxy"></a>haproxy</h2><h3 id="configuration-1"><a href="#configuration-1" class="headerlink" title="configuration"></a>configuration</h3><ul><li><p>haproxy configure</p><pre><code class="bash">$ sudo bash -c &#39;cat /etc/haproxy/haproxy.cfg&#39; &lt;&lt; EOF#---------------------------------------------------------------------# Example configuration for a possible web application.  See the# full configuration options online.##   http://haproxy.1wt.eu/download/2.0/doc/configuration.txt##---------------------------------------------------------------------#---------------------------------------------------------------------# Global settings#---------------------------------------------------------------------global    log         127.0.0.1 local2    chroot      /var/lib/haproxy    pidfile     /var/run/haproxy.pid    maxconn     4000    user        haproxy    group       haproxy    daemon    # turn on stats unix socket    stats socket /var/lib/haproxy/stats#---------------------------------------------------------------------# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will# use if not designated in their block#---------------------------------------------------------------------defaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except 127.0.0.0/8    option                  redispatch    retries                 3    timeout http-request    10s    timeout queue           1m    timeout connect         10s    timeout client          1m    timeout server          1m    timeout http-keep-alive 10s    timeout check           10s    maxconn                 3000#---------------------------------------------------------------------# kubernetes apiserver frontend which proxys to the backends#---------------------------------------------------------------------frontend kubernetes-apiserver    mode                 tcp    bind                 *:16443    option               tcplog    default_backend      kubernetes-apiserver#---------------------------------------------------------------------# round robin balancing between the various backends#---------------------------------------------------------------------backend kubernetes-apiserver    mode        tcp    balance     roundrobin    option      tcplog    option      tcp-check    server      $&#123;master01Name&#125; $&#123;master01IP&#125;:6443 check    server      $&#123;master02Name&#125; $&#123;master02IP&#125;:6443 check    server      $&#123;master03Name&#125; $&#123;master03IP&#125;:6443 check#---------------------------------------------------------------------# collection haproxy statistics message#---------------------------------------------------------------------listen stats    bind                 :8000    stats auth           admin:devops    maxconn              50    stats refresh        10s    stats realm          HAProxy\ Statistics    stats uri            /healthyEOF</code></pre></li><li><p>Service</p><pre><code class="bash">$ sudo bash -c &#39;cat &gt; /lib/systemd/system/haproxy.service&#39; &lt;&lt; EOF[Unit]Description=HAProxy Load BalancerAfter=network.target syslog.serviceWants=syslog.service[Service]Environment=&quot;CONFIG=/etc/haproxy/haproxy.cfg&quot; &quot;PIDFILE=/run/haproxy.pid&quot;EnvironmentFile=-/etc/default/haproxyExecStartPre=/usr/sbin/haproxy -f $CONFIG -c -qExecStart=/usr/sbin/haproxy -W -f $CONFIG -p $PIDFILE $EXTRAOPTSExecReload=/usr/sbin/haproxy -f $CONFIG -c -q $EXTRAOPTS $RELOADOPTSExecReload=/bin/kill -USR2 $MAINPIDKillMode=mixedRestart=alwaysType=forking[Install]WantedBy=multi-user.targetEOF</code></pre><h3 id="Start-Service"><a href="#Start-Service" class="headerlink" title="Start Service"></a>Start Service</h3><pre><code class="bash">$ sudo systemctl enabled haproxy.service$ sudo systemctl start haproxy.service</code></pre></li></ul><h3 id="verify"><a href="#verify" class="headerlink" title="verify"></a>verify</h3><pre><code class="bash">$ sudo systemctl is-enabled haproxy.serviceenabled$ sudo systemctl is-active haproxy.serviceactive</code></pre><img src="/assets/images/haproxy-1.png" style="width: 999px;" />]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuberentes </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.15.3 HA kubernetes Cluster Playbook (etcd cluster)</title>
      <link href="2020/08/30/1-15-3-HA-kubernetes-Cluster-Playbook-etcd-cluster/"/>
      <url>2020/08/30/1-15-3-HA-kubernetes-Cluster-Playbook-etcd-cluster/</url>
      
        <content type="html"><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><img src="/assets/images/external-etcd-topology-etcd-cluster.png" style="width: 666px;" /><a id="more"></a><h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b>execute the variables in all console (masters) at the very begining, make sure all servers are using the exact same value (and avoid manual input)</div><pre><code class="bash">## change if necessary# hostnamemaster01Name=&#39;master01&#39;master02Name=&#39;master02&#39;master03Name=&#39;master03&#39;# ipaddressmaster01IP=&#39;192.168.100.200&#39;master01IP=&#39;192.168.100.201&#39;master01IP=&#39;192.168.100.202&#39;virtualIP=&#39;192.168.100.250&#39;leadIP=&quot;$&#123;master01IP&#125;&quot;leadName=&quot;$&#123;master01Name&#125;&quot;k8sVer=&#39;v1.15.3&#39;cfsslDownloadUrl=&#39;https://pkg.cfssl.org/R1.2&#39;etcdVer=&#39;v3.3.15&#39;etcdDownloadUrl=&#39;https://github.com/etcd-io/etcd/releases/download&#39;etcdSSLPath=&#39;/etc/etcd/ssl&#39;etcdInitialCluster=&quot;$&#123;master01Name&#125;=https://$&#123;master01IP&#125;:2380,$&#123;master02Name&#125;=https://$&#123;master02IP&#125;:2380,$&#123;master03Name&#125;=https://$&#123;master03IP&#125;:2380&quot;keepaliveVer=&#39;2.0.18&#39;haproxyVer=&#39;2.0.6&#39;helmVer=&#39;v2.14.3&#39;interface=$(netstat -nr | grep -E &#39;UG|UGSc&#39; | grep -E &#39;^0.0.0|default&#39; | grep -E &#39;[0-9.]&#123;7,15&#125;&#39; | awk -F&#39; &#39; &#39;&#123;print $NF&#125;&#39;)ipAddr=$(ip a s &quot;$&#123;interface&#125;&quot; | sed -rn &#39;s|\W*inet[^6]\W*([0-9\.]&#123;7,15&#125;).*$|\1|p&#39;)peerName=$(hostname)</code></pre><br><h2 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h2><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> setup certificate in one of master</div><pre><code class="bash">$ sudo mkdir -p $&#123;etcdSSLPath&#125;# cd $&#123;etcdSSLPath&#125;</code></pre><ul><li><p>Certificate Signing Request</p><pre><code class="bash">master01 $ sudo bash -c &#39;cat &gt; $&#123;etcdSSLPath&#125;/ca-config.json&#39; &lt;&lt; EOF&#123;    &quot;signing&quot;: &#123;        &quot;default&quot;: &#123;            &quot;expiry&quot;: &quot;43800h&quot;        &#125;,        &quot;profiles&quot;: &#123;            &quot;server&quot;: &#123;                &quot;expiry&quot;: &quot;43800h&quot;,                &quot;usages&quot;: [                    &quot;signing&quot;,                    &quot;key encipherment&quot;,                    &quot;server auth&quot;,                    &quot;client auth&quot;                ]            &#125;,            &quot;client&quot;: &#123;                &quot;expiry&quot;: &quot;43800h&quot;,                &quot;usages&quot;: [                    &quot;signing&quot;,                    &quot;key encipherment&quot;,                    &quot;client auth&quot;                ]            &#125;,            &quot;peer&quot;: &#123;                &quot;expiry&quot;: &quot;43800h&quot;,                &quot;usages&quot;: [                    &quot;signing&quot;,                    &quot;key encipherment&quot;,                    &quot;server auth&quot;,                    &quot;client auth&quot;                ]            &#125;        &#125;    &#125;&#125;EOF</code></pre></li><li><p>CA</p><pre><code class="bash">master01 $ sudo bash -c &#39;cat &gt; $&#123;etcdSSLPath&#125;/ca-csr.json&#39; &lt;&lt; EOF&#123;    &quot;CN&quot;: &quot;etcd&quot;,    &quot;key&quot;: &#123;        &quot;algo&quot;: &quot;rsa&quot;,        &quot;size&quot;: 2048    &#125;&#125;EOF</code></pre></li><li><p>Client</p><pre><code class="bash">master01 $ sudo bash -c &#39;cat &gt; $&#123;etcdSSLPath&#125;/client.json&#39; &lt;&lt; EOF&#123;    &quot;CN&quot;: &quot;client&quot;,    &quot;key&quot;: &#123;        &quot;algo&quot;: &quot;ecdsa&quot;,        &quot;size&quot;: 256    &#125;&#125;EOF</code></pre></li><li><p>generate the ca and client cert files</p><pre><code class="bash">$ cd $&#123;etcdSSLPath&#125;# ca$ sudo /usr/local/bin/cfssl gencert \       -initca ca-csr.json \       | sudo /usr/local/bin/cfssljson -bare ca -# client$ sudo /usr/local/bin/cfssl gencert \       -ca=ca.pem \       -ca-key=ca-key.pem \       -config=ca-config.json \       -profile=client client.json \       | sudo /usr/local/bin/cfssljson -bare client</code></pre></li></ul><details><summary> click for more details </summary><pre><code>master01 $ sudo /usr/local/bin/cfssl gencert \           -initca ca-csr.json \           | sudo /usr/local/bin/cfssljson -bare ca -2019/09/30 01:49:48 [INFO] generating a new CA key and certificate from CSR2019/09/30 01:49:48 [INFO] generate received request2019/09/30 01:49:48 [INFO] received CSR2019/09/30 01:49:48 [INFO] generating key: rsa-20482019/09/30 01:49:49 [INFO] encoded CSR2019/09/30 01:49:49 [INFO] signed certificate with serial number 173058676426587113118523721133402005590635049898master01 $ lsca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem<p>master01 $ sudo /usr/local/bin/cfssl gencert <br>       -ca=ca.pem <br>       -ca-key=ca-key.pem <br>       -config=ca-config.json <br>       -profile=client client.json <br>       | sudo /usr/local/bin/cfssljson -bare client<br>2019/09/30 01:51:23 [INFO] generate received request<br>2019/09/30 01:51:23 [INFO] received CSR<br>2019/09/30 01:51:23 [INFO] generating key: ecdsa-256<br>2019/09/30 01:51:23 [INFO] encoded CSR<br>2019/09/30 01:51:23 [INFO] signed certificate with serial number 294078367149194824536836589897529440907602394934<br>2019/09/30 01:51:23 [WARNING] This certificate lacks a “hosts” field. This makes it unsuitable for<br>websites. For more information see the Baseline Requirements for the Issuance and Management<br>of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (<a href="https://cabforum.org/">https://cabforum.org</a>);<br>specifically, section 10.2.3 (“Information Requirements”).<br>master01 $ ls<br>ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem  client.csr  client.json  client-key.pem  client.pem<br></code></pre></p></details><br><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> copy certs (ca & client) to the other two kubernetes masters</div>- copy certs to another two masters  ```bash  $ for i in {2..3}; do    ssh master0${i} 'sudo mkdir -p ${etcdSSLPath}'    rsync -avzrlpgoDP \          --rsync-path='sudo rsync' \          ${etcdSSLPath}/*.pem \          master0${i}:${etcdSSLPath}/    rsync -avzrlpgoDP \          --rsync-path='sudo rsync' \          ${etcdSSLPath}/ca-config.json \          master0${i}:${etcdSSLPath}/  done  ```<br><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> etcd cluster need to be setup in all masters</div><ul><li><p><code>etcd.service</code></p><pre><code class="bash">$ sudo bash -c &#39;cat &gt;/etc/systemd/system/etcd.service&#39; &lt;&lt; EOF[Install]WantedBy=multi-user.target[Unit]Description=Etcd ServerDocumentation=https://github.com/marslo/mytoolsConflicts=etcd.serviceConflicts=etcd2.service[Service]Type=notifyWorkingDirectory=/var/lib/etcd/Restart=alwaysRestartSec=5sEnvironmentFile=-/etc/etcd/etcd.confExecStart=/bin/bash -c &quot;GOMAXPROCS=$(nproc) /usr/local/bin/etcd&quot;Restart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF</code></pre></li><li><p><code>etcd.conf</code></p><pre><code class="bash">$ sudo bash -c &#39;cat &gt; /etc/etcd/etcd.conf&#39; &lt;&lt; EOFETCD_NAME=$&#123;peerName&#125;ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;#ETCD_WAL_DIR=&quot;&quot;#ETCD_SNAPSHOT_COUNT=&quot;10000&quot;#ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;#ETCD_ELECTION_TIMEOUT=&quot;1000&quot;ETCD_LISTEN_PEER_URLS=&quot;https://0.0.0.0:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;https://0.0.0.0:2379&quot;#ETCD_MAX_SNAPSHOTS=&quot;5&quot;#ETCD_MAX_WALS=&quot;5&quot;#ETCD_CORS=&quot;&quot;#[cluster]ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://$&#123;ipAddr&#125;:2380&quot;# if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;ETCD_INITIAL_CLUSTER=&quot;$&#123;etcdInitialCluster&#125;&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;https://$&#123;ipAddr&#125;:2379&quot;#ETCD_DISCOVERY=&quot;&quot;#ETCD_DISCOVERY_SRV=&quot;&quot;#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;#ETCD_DISCOVERY_PROXY=&quot;&quot;#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;#[proxy]#ETCD_PROXY=&quot;off&quot;#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;#[security]ETCD_CERT_FILE=&quot;$&#123;etcdSSLPath&#125;/server.pem&quot;ETCD_KEY_FILE=&quot;$&#123;etcdSSLPath&#125;/server-key.pem&quot;ETCD_CLIENT_CERT_AUTH=&quot;true&quot;ETCD_TRUSTED_CA_FILE=&quot;$&#123;etcdSSLPath&#125;/ca.pem&quot;ETCD_AUTO_TLS=&quot;true&quot;ETCD_PEER_CERT_FILE=&quot;$&#123;etcdSSLPath&#125;/peer.pem&quot;ETCD_PEER_KEY_FILE=&quot;$&#123;etcdSSLPath&#125;/peer-key.pem&quot;#ETCD_PEER_CLIENT_CERT_AUTH=&quot;false&quot;ETCD_PEER_TRUSTED_CA_FILE=&quot;$&#123;etcdSSLPath&#125;/ca.pem&quot;ETCD_PEER_AUTO_TLS=&quot;true&quot;#[logging]#ETCD_DEBUG=&quot;false&quot;# examples for -log-package-levels etcdserver=WARNING,security=DEBUG#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;#[profiling]#ETCD_ENABLE_PPROF=&quot;false&quot;#ETCD_METRICS=&quot;basic&quot;EOF</code></pre></li><li><p>enable service</p><pre><code class="bash">$ sudo systemctl daemon-reload$ sudo systemctl enable --now etcd$ sudo systemctl start etcd.service</code></pre></li><li><p>verify</p><pre><code class="bash">master0&#123;1..3&#125; $ sudo systemctl status etcdmaster01 $ sudo /usr/local/bin/etcdctl --ca-file /etc/etcd/ssl/ca.pem --cert-file /etc/etcd/ssl/client.pem --key-file /etc/etcd/ssl/client-key.pem --endpoints https://192.168.100.200:2379,https://192.168.100.201:2379,https://192.168.100.202:2379 cluster-healthmember ae76391b129**** is healthy: got healthy result from https://192.168.100.200:2379member cda996b3ea5a*** is healthy: got healthy result from https://192.168.100.201:2379member e295a3c1654e*** is healthy: got healthy result from https://192.168.100.202:2379cluster is healthy</code></pre></li></ul><details><summary>tips</summary><pre><code>$ alias etcdctl="sudo /usr/local/bin/etcdctl --ca-file /etc/etcd/ssl/ca.pem --cert-file /etc/etcd/ssl/client.pem --key-file /etc/etcd/ssl/client-key.pem --endpoints https://192.168.100.200:2379,https://192.168.100.201:2379,https://192.168.100.202:2379"$ etcdctl cluster-health</code></pre></details>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuberentes </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.15.3 HA kubernetes Cluster Playbook (basic environment)</title>
      <link href="2020/08/25/1-15-3-HA-kubernetes-Cluster-Playbook-basic-environment/"/>
      <url>2020/08/25/1-15-3-HA-kubernetes-Cluster-Playbook-basic-environment/</url>
      
        <content type="html"><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><img src="/assets/images/external-etcd-topology.png" style="width: 666px;" /><a id="more"></a><blockquote><p>[!NOTE]<br>notice</p></blockquote><blockquote><p>reference:</p><ul><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/#external-etcd-topology">Kubernetes HA cluster with external etcd</a></li><li><a href="https://coreos.com/os/docs/latest/generate-self-signed-certificates.html">Generate self-signed certificates</a></li></ul></blockquote><h3 id="Server-Matrix"><a href="#Server-Matrix" class="headerlink" title="Server Matrix"></a>Server Matrix</h3><h4 id="Environment-List"><a href="#Environment-List" class="headerlink" title="Environment List"></a>Environment List</h4><table><thead><tr><th>Hostname</th><th>IP Address</th><th>etcd</th><th>cfssl &amp; cfssljson</th><th>keepalived</th><th>haproxy</th></tr></thead><tbody><tr><td>master01</td><td>192.168.100.200</td><td>master01 (etcd-0)</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>master02</td><td>192.168.100.201</td><td>master02 (etcd-1)</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>master03</td><td>192.168.100.202</td><td>master03 (etcd-2)</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>node01</td><td>192.168.100.203</td><td>&#x2717;</td><td>&#x2717;</td><td>&#x2717;</td><td>&#x2717;</td></tr><tr><td>node02</td><td>192.168.100.204</td><td>&#x2717;</td><td>&#x2717;</td><td>&#x2717;</td><td>&#x2717;</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>virtual IP</td><td>192.168.100.250</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="etc-hosts"><a href="#etc-hosts" class="headerlink" title="/etc/hosts"></a><code>/etc/hosts</code></h4><p>Add for all servers</p><pre><code class="bash">192.168.100.200     master01192.168.100.201     master02192.168.100.202     master03192.168.100.203     worker01192.168.100.204     worker02192.168.100.250     jenkins.marslo.com192.168.100.250     prometheus.marslo.com192.168.100.250     grafana.marslo.com192.168.100.250     dashboard.marslo.com</code></pre><h4 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h4><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b>execute the variables in all console (masters) at the very begining, make sure all servers are using the exact same value (and avoid manual input)</div><pre><code class="bash">## change if necessary# hostnamemaster01Name=&#39;master01&#39;master02Name=&#39;master02&#39;master03Name=&#39;master03&#39;# ipaddressmaster01IP=&#39;192.168.100.200&#39;master01IP=&#39;192.168.100.201&#39;master01IP=&#39;192.168.100.202&#39;virtualIP=&#39;192.168.100.250&#39;leadIP=&quot;$&#123;master01IP&#125;&quot;leadName=&quot;$&#123;master01Name&#125;&quot;k8sVer=&#39;v1.15.3&#39;cfsslDownloadUrl=&#39;https://pkg.cfssl.org/R1.2&#39;etcdVer=&#39;v3.3.15&#39;etcdDownloadUrl=&#39;https://github.com/etcd-io/etcd/releases/download&#39;etcdSSLPath=&#39;/etc/etcd/ssl&#39;etcdInitialCluster=&quot;$&#123;master01Name&#125;=https://$&#123;master01IP&#125;:2380,$&#123;master02Name&#125;=https://$&#123;master02IP&#125;:2380,$&#123;master03Name&#125;=https://$&#123;master03IP&#125;:2380&quot;keepaliveVer=&#39;2.0.18&#39;haproxyVer=&#39;2.0.6&#39;helmVer=&#39;v2.14.3&#39;interface=$(netstat -nr | grep -E &#39;UG|UGSc&#39; | grep -E &#39;^0.0.0|default&#39; | grep -E &#39;[0-9.]&#123;7,15&#125;&#39; | awk -F&#39; &#39; &#39;&#123;print $NF&#125;&#39;)ipAddr=$(ip a s &quot;$&#123;interface&#125;&quot; | sed -rn &#39;s|\W*inet[^6]\W*([0-9\.]&#123;7,15&#125;).*$|\1|p&#39;)peerName=$(hostname)</code></pre><h2 id="Tools-Setup"><a href="#Tools-Setup" class="headerlink" title="Tools Setup"></a>Tools Setup</h2><h3 id="cfssl-amp-cfssljson"><a href="#cfssl-amp-cfssljson" class="headerlink" title="cfssl &amp; cfssljson"></a>cfssl &amp; cfssljson</h3><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> cfssl and cfssljson need to be setup in all masters!</div><pre><code class="bash">$ sudo bash -c &quot;curl -o /usr/local/bin/cfssl $&#123;cfsslDownloadUrl&#125;/cfssl_linux-amd64&quot;$ sudo bash -c &quot;curl -o /usr/local/bin/cfssljson $&#123;cfsslDownloadUrl&#125;/cfssljson_linux-amd64&quot;$ sudo chmod +x /usr/local/bin/cfssl*</code></pre><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i><b>Tip: </b> etcd need to be setup in all masters!</div><pre><code class="bash">$ curl -sSL $&#123;etcdDownloadUrl&#125;/$&#123;etcdVer&#125;/etcd-$&#123;etcdVer&#125;-linux-amd64.tar.gz \    | sudo tar -xzv --strip-components=1 -C /usr/local/bin/</code></pre><details><summary> click for more details </summary><pre><code>$ for i in &#123;1..3&#125;; do  ssh devops@master0$&#123;i&#125; curl -sSL $&#123;etcd_download_url&#125;/$&#123;etcd_version&#125;/etcd-$&#123;etcd_version&#125;-linux-amd64.tar.gz | sudo tar -xzv --strip-components=1 -C /usr/local/bin/  ssh devops@master0$&#123;i&#125; 'etcd --version'doneResult:etcd Version: 3.3.15Git SHA: 94745a4eeGo Version: go1.12.9Go OS/Arch: linux/amd64</code></pre></details><br><h3 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h3><ul><li><p>Installation</p><pre><code class="bash">$ mkdir -p ~/temp$ sudo mkdir -p /etc/keepalived/$ curl -fsSL $&#123;keepaliveDownloadUrl&#125;/keepalived-$&#123;keepaliveVer&#125;.tar.gz \   | tar xzf - -C ~/temp$ pushd .$ cd ~/temp/keepalived-$&#123;keepaliveVer&#125;$ ./configure &amp;&amp; make$ sudo make install$ sudo cp keepalived/keepalived.service /etc/systemd/system/$ popd$ rm -rf ~/temp</code></pre><h3 id="Haproxy-2-0-6"><a href="#Haproxy-2-0-6" class="headerlink" title="Haproxy 2.0.6"></a>Haproxy 2.0.6</h3></li><li><p>Install haproxy from source code</p><pre><code class="bash"> $ curl -fsSL http://www.haproxy.org/download/$(echo $&#123;haproxyVer%\.*&#125;)/src/haproxy-$&#123;haproxyVer&#125;.tar.gz \       | tar xzf - -C ~$ pushd .$ cd ~/haproxy-$&#123;haproxyVer&#125;$ make TARGET=linux-glibc \       USE_LINUX_TPROXY=1 \       USE_ZLIB=1 \       USE_REGPARM=1 \       USE_PCRE=1 \       USE_PCRE_JIT=1 \       USE_OPENSSL=1 \       SSL_INC=/usr/include \       SSL_LIB=/usr/lib \       ADDLIB=-ldl \       USE_SYSTEMD=1$ sudo make install$ sudo cp haproxy /usr/sbin/$ sudo cp examples/haproxy.init /etc/init.d/haproxy &amp;&amp; sudo chmod +x $_$ popd$ rm -rf ~/haproxy-$&#123;haproxyVer&#125;</code></pre></li><li><p>Result</p><img src="/assets/images/haproxy-1.png" style="width: 999px;" /></li></ul><h3 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h3><ul><li><p>Installation</p><pre><code class="bash">$ curl -fsSL \    https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz \    | sudo tar -xzv --strip-components=1 -C /usr/local/bin/$ while read -r _i; do    sudo chmod +x &quot;/usr/local/bin/$&#123;_i&#125;&quot;done &lt; &lt;(echo helm tiller)</code></pre></li><li><p>Configration</p><pre><code class="bash">$ helm init$ helm init --client-only$ kubectl create serviceaccount -n kube-system tiller$ kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller$ kubectl patch deploy -n kube-system tiller-deploy -p &#39;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&#39;$ helm repo add jetstack https://charts.jetstack.io</code></pre></li></ul><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><ul><li><p>Presetup</p><pre><code class="bash"># clean environment$ sudo yum remove -y docker                  \                     docker-client           \                     docker-client-latest    \                     docker-common           \                     docker-latest           \                     docker-latest-logrotate \                     docker-logrotate        \                     docker-selinux          \                     docker-engine-selinux   \                     docker-engine# nice to have$ sudo yum -y groupinstall &#39;Development Tools&#39;$ sudo yum install -y yum-utils                   \                    device-mapper-persistent-data \                    lvm2                          \                    bash-completion*$ sudo yum-config-manager \     --add-repo           \     https://download.docker.com/linux/centos/docker-ce.repo$ sudo yum-config-manager --disable docker-ce-edge$ sudo yum-config-manager --disable docker-ce-test$ sudo yum makecache</code></pre></li><li><p>Installaiton</p><pre><code class="bash">$ dockerVer=$(sudo yum list docker-ce --showduplicates \                | sort -r \                | grep 18\.09 \                | awk -F&#39; &#39; &#39;&#123;print $2&#125;&#39; \                | awk -F&#39;:&#39; &#39;&#123;print $NF&#125;&#39; \             )$ sudo yum install -y                      \         docker-ce-$&#123;dockerVer&#125;.x86_64     \         docker-ce-cli-$&#123;dockerVer&#125;.x86_64 \         containerd.io</code></pre></li><li><p>Configuraiton</p><pre><code class="bash">$ sudo systemctl enable --now docker$ sudo systemctl status docker$ sudo chown -a -G docker $(whomai)</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuberentes </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
